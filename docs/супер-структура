Ты – продвинутый ассистент, управляющий разработкой проекта «Паппи». Мне нужен **подробнейший** план (To-Do лист) **по уровням**:

1. **Уровень проекта (Global)**:
   - Отобрази **список больших модулей/приложений** (например, `accounts`, `authorization`, `announcements`, `catalog`, `messaging`, `reviews`, `vip`, и т. д.).
   - Для каждого приложения – **своя** секция.

2. **Уровень приложения**:
   - Внутри каждого приложения создаём **To-Do лист**:
     - «Создать/обновить модели (models.py)»
     - «Создать/обновить views (views.py)»
     - «Сформировать urls.py» (если есть отдельный urls)
     - «Написать/обновить шаблоны HTML (или React-компоненты), если нужно»
     - «Проверить через… (manage.py runserver + простой фронт)»  

   - Покажи **хронологическую** структуру: 
     - какие задачи «в первую очередь» (без чего нельзя идти дальше),
     - какие задачи «второстепенные»,
     - какие задачи «заключительные» (например, тесты, документация).  

   - **Важно**: для **каждого** пункта (например, «Создать модели») – **коротко** укажи, какие классы, поля, связи.

3. **Уровень классов**:
   - Внутри приложения, для каждого **класса** (например, `User`, `Profile`, `Announcement`, `Chat`, `Message`, `Review`, `VIPSubscription`) – заведи **свой** To-Do лист:
     - «Создать поля (phone, email, etc.), расставить ForeignKey»
     - «Добавить методы (send_code, check_availability, …)»
     - «Написать тесты для метода X»
     - «Подключить сигналы, если нужно»
   - Хронологический порядок: сначала поля, потом миграции, потом методы, потом тесты.

4. **Уровень функций/методов**:
   - Для каждого класса перечисли **методы** или **функции**.
   - Создай **микро-To-Do**: 
     - «Реализовать логику… (валидация, сохранение, отправка)»
     - «Тест на позитивный сценарий»
     - «Тест на негативный сценарий (ошибка)»
     - «Проверка через UI» (если нужно).
   - Тоже **по порядку**: сначала реализация кода, потом тест, потом проверка, потом рефакторинг (если надо).

5. **Хронологический принцип**:  
   - Сначала то, без чего нельзя начать (например, базовые модели `User`),  
   - Потом зависимости (если класс B наследуется от A, реализовать A первым),  
   - Затем high-level штуки (например, views, роуты),
   - Под конец – интеграция фронтенда.

6. **Проверка и запуск**:
   - На **каждом** шаге To-Do: «Запустить сервер (manage.py runserver)», «Открыть тестовый HTML (можно без стилей) / Postman / DRF browsable API», «Убедиться, что работает».  
   - Если всё ок – перейти к следующей задаче.  
   - Если ошибка – фиксить до перехода к следующему.  

7. **Вывод**:
   - Сформируй **итоговый** иерархический список:
     1. **Проект (Global)**  
        1.1 Приложение A (список задач)  
             1.1.1 Класс A1 (список задач)  
                   1.1.1.1 Метод A1_m1 (список подзадач)  
                   1.1.1.2 Метод A1_m2 (список подзадач)  
             1.1.2 Класс A2 (список задач)  
                   …  
        1.2 Приложение B …  
        …  
   - Каждое «лист» с максимально конкретными действиями. 

8. **Не отходить** от структуры задач:
   - Если что-то не вписывается (другая задача), игнорируй или помечай «# TODO позже».
   - Уверься, что **последовательность** соблюдена, нет скачков.

9. **Минимальный фронт** (важно):
   - При каждой задаче, которая создаёт/меняет логику, сделай короткую проверку через **упрощённый HTML**.  
   - Поднимай бэкенд, отправляй запросы, проверяй результаты.

### Итог

**Приступай** к созданию **полного** (и максимально детализированного) To-Do плана. Покажи иерархию (Проект → Приложения → Классы → Методы). В каждом пункте опиши **что делать**, **как проверить** (запуск сервера, упрощённый HTML). Не добавляй лишних задач, не уходи за рамки этой структуры. Если что-то не ясно – пометь `# TODO`.  

Ты – продвинутый ассистент, призванный вести разработку большого проекта «Паппи», строго по **хронологическому** плану и **иерархическому** разделению задач:

### Основные требования

1. **Разделение задач**:
   - **Уровень всего проекта** (core, «главная» логика).
   - **Уровень приложений** (authorization, catalog, announcements, messaging и т. п.), где каждая задача внутри папки своего приложения.
   - **Уровень классов** (например, классы моделей, представлений, сервисов).  
   - **Уровень функций** (методы внутри классов, хелперы, отдельные API-функции), где каждая функция имеет собственный список задач (тесты, валидация, т. п.).

2. **Хронологически правильный порядок**:
   - Сначала задачи, без которых **невозможно** продолжать (например, создание базовых моделей).
   - Затем зависимости (если класс B требует класс A – сначала создать класс A).
   - В конце — более высокоуровневые штуки (роутинги, интеграции и т. д.).

3. **Не отклоняться от структуры**:
   - Если есть план «сделать AuthApp → дописать models → затем views → затем фронтенд-форму для проверки», агент **не** должен переключаться внезапно на VIP-систему, если она в другом модуле, пока не завершены текущие задачи.
   - При любом шаге, если что-то требует предварительной задачи, нельзя перескакивать.

4. **Постоянная проверка (запуск фронта и бэка)**:
   - После каждой реализованной подсекции (например, «написать форму авторизации + view + модель для кода») — нужно **поднять сервер** бэкенда (manage.py runserver или эквивалент), поднять локальный HTML/JS (или простейший шаблон Django) и **проверить**, что фронт и бэк действительно работают.
   - Включить элементарный UI (можно без стилей), лишь бы можно было «ввести номер телефона, нажать кнопку → бэкенд отвечает». 
   - Если есть ошибки — устранить их перед переходом к следующему блоку.

5. **Минимизация стилевого фронтенда**:
   - Достаточно **самого простого** HTML (без сложного CSS). Главное — функциональная проверка.
   - В будущем можно дорабатывать стили, но **никогда** не пропускаем проверку «UI ↔ бэкенд».

6. **Проверка задач в локальном контексте**:
   - Если в приложении `authorization` есть класс `LoginView`, агент должен **посмотреть**: «А не меняем ли мы потом то же класс в другой задаче?». Если да, — учесть это, чтобы не сломать. 
   - Не создавать новых переменных, которые конфликтуют с уже объявленными. Если требуется rename — сделать по согласованию.

7. **Вывод**: 
   - Агент должен в итоге **сформировать**:
     1. **Дерево** задач (проект → приложение → класс → функции).
     2. **Хронологический план** (в каком порядке всё делается, и как проверяется).
     3. **Подробные инструкции** по каждому шагу: какой файл меняем, какие поля, какие методы, как проверить. 
   - При каждом шаге упоминать: «Теперь запускаем фронт (упрощённый HTML) и бэк (manage.py runserver) — проверяем, что всё работает».

8. **Логирование и контроль**:
   - Каждая несоответствующая задача (вдруг вылезшая сбоку) игнорируется, если не вписывается в текущий этап. 
   - Если агенту нужно добавить поле, класс, функцию — надо **объяснить**, в какой пункт To-Do это вносит изменения, и в каком порядке. 

### Задача

**Составь** для меня:
1. **ОЧЕНЬ подробный план** (To-Do лист) для **всего проекта**:
   - Разбей на **крупные блоки** (уровень проекта) → **подблоки** (приложения) → **под-под-блоки** (классы) → **шаги** (функции).
   - Укажи порядок (сначала авторизация модели, затем авторизация views, затем фронт, затем каталог моделей, затем каталог views, и т. д.).
2. **В каждом шаге**:
   - Опиши **конкретные задачи**: «Добавить поле phone в модель User, сделать миграцию, написать функцию send_sms_code…».
   - Объясни, **как проверить** (запустить сервер, зайти на `/login`, ввести телефон, посмотреть лог).
3. **Контроль**:
   - Всегда запускай сервер (бэкенд) и показывай, как открыть тестовый фронтенд (HTML) для проверки, пока всё не заработает. **Только** после успешной проверки переходи к следующему пункту.

### Выдача результата
- Выдай **список задач** (To-Do лист) по уровням.
- Покажи **порядок** (хронологию).
- **Не** уходи в другие темы, следуй строго структуре.

**Приступай** к генерации этого плана:  
1. Перечисли **все приложения** (authorization, announcements, catalog, messaging, reviews, vip, и т. п. — если так в проекте).  
2. Для каждого приложения **распиши классы** (models, views, forms, serializers).  
3. Для каждого класса **укажи функции**.  
4. Хронологически укажи порядок реализации (что сначала, что потом).  
5. Покажи, как на каждом шаге мы **поднимаем сервер**, **открываем простой фронт** (например, `auth_test.html`) и вводим данные, проверяем 200 OK.  

Если где-то не хватает данных, вставь комментарий `# TODO: уточнить`.  
Структура должна быть чёткой, чтобы я мог просто идти сверху вниз, выполняя таски, и уверен, что не сломаю уже сделанное.

